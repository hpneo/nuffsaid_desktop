var Inflecta = require('inflecta'),
    Coffre = require('./index'),
    Statements = require('./statements'),
    Sql = require('sql'),
    SQL = new Sql.Sql('sqlite');

var Relation = function Relation(options) {
  this.model = options.model;
  this.table = options.table;
  this.values = options.values;
  this.records = options.records || [];

  var table = SQL.define({
        name: this.table,
        columns: this.model.attributes
      });

  this.query = table.select(table.star()).from(table);

  if (this.values && this.values.where) {
    var key = Object.keys(this.values.where)[0],
        value = this.values.where[key];

    this.query = this.query.where(table[key].equals(value));

    if (this.values.oneResult === true) {
      this.query = this.query.limit(1);
    }
  }

  if (this.records.length > 0) {
    this.length = 0;

    for (var i = 0; i < this.records.length; i++) {
      this.push(this.records[i]);
    }
  }
};

Relation.prototype = Array.prototype;

Relation.prototype.toQuery = function() {
  return this.query.toQuery();
};

Relation.prototype.load = function() {
  var self = this,
      promise;

  if (this.records.length > 0) {
    promise = new global.window.Promise(function(resolve, reject) {
      self.length = 0;

      for (var i = 0; i < self.records.length; i++) {
        self.push(self.records[i]);
      }

      if (self.values.oneResult === true) {
        resolve(self[0]);
      }
      else {
        resolve(self);
      }
    });
  }
  else {
    promise = new global.window.Promise(function(resolve, reject) {
      Coffre.getDatabase().transaction(function(transaction) {
        transaction.executeSql(self.toQuery().text, self.toQuery().values, function(transaction, results) {
          self.length = 0;

          for (var i = 0; i < results.rows.length; i++) {
            self.push(new self.model(results.rows.item(i)));
          }

          if (self.values.oneResult === true) {
            resolve(self[0]);
          }
          else {
            resolve(self);
          }
        }, function(error) {
          reject(error);
        });
      });
    });
  }

  return promise;
};

module.exports = Relation;