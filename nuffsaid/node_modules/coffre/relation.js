var Inflecta = require('inflecta'),
    Coffre = require('./index'),
    Statements = require('./statements'),
    Sql = require('sql'),
    SQL = new Sql.Sql('sqlite');

var Relation = function Relation(options) {
  this.model = options.model;
  this.table = options.table;
  this.values = options.values;

  var table = SQL.define({
        name: this.table,
        columns: this.model.attributes
      });

  this.query = table.select(table.star()).from(table);

  if (this.values && this.values.where) {
    var key = Object.keys(this.values.where)[0],
        value = this.values.where[key];

    this.query = this.query.where(table[key].equals(value));
  }
};

Relation.prototype = Array.prototype;

Relation.prototype.toQuery = function() {
  return this.query.toQuery();
};

Relation.prototype.load = function() {
  var self = this;

  var promise = new global.window.Promise(function(resolve, reject) {
    Coffre.getDatabase().transaction(function(transaction) {
      transaction.executeSql(self.toQuery().text, self.toQuery().values, function(transaction, results) {
        self.length = 0;

        for (var i = 0; i < results.rows.length; i++) {
          self.push(new self.model(results.rows.item(i)));
        }

        resolve(self);
      }, function(error) {
        reject(error);
      });
    });
  });

  return promise;
};

module.exports = Relation;